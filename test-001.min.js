/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*************************!*\
  !*** ./src/test-001.js ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	
	var Socket = __webpack_require__(/*! ./SocketConnection.js */ 1),
	    sha1 = __webpack_require__(/*! ./sha1.js */ 2);
	
	(function(test){
	
	    var url = 'ws://rde-tech.vir888.com:81/gows/',
	        //url = 'ws://colin.test:8001/',
	        key = sha1(new Date).replace(/^(\w{7}).+$/, '$1');
	
	    test(url+'?key='+key, 10);
	
	})(function(url, intval){
	
	    var ws = Socket.connect(url),
	        // 單趟封包傳遞時間
	        data_travel_ms = 0,
	        // server 跟 local 毫秒差
	        server_diff_ms = 0,
	        ping_ms = 0,
	        pong_ms = 0,
	        timer;
	
	    if ( ! ws) return;
	
	    ws.on('open', function(){
	        ping();
	        timer = setInterval(ping, parseInt(intval) * 1000);
	    });
	
	    ws.listen('pong', function(msg){
	        msg.
	            replace(/in:(\d+)/, function(m, $1){
	                var in_ms = parseInt($1);
	
	                // 計算封包單趟毫秒
	                data_travel_ms = (((new Date).getTime() - ping_ms) / 2) >> 0;
	
	                // 計算與 server 毫秒差
	                server_diff_ms = ping_ms - in_ms - data_travel_ms;
	
	                console.log({
	                    now: (new Date).getTime(),
	                    ping_ms: ping_ms,
	                    in_ms: in_ms,
	                    data_travel_ms: data_travel_ms,
	                    server_diff_ms: server_diff_ms
	                })
	            }).
	            replace(/out:(\d+)/, function(m, $1){
	                pong_ms = parseInt($1);
	
	                console.log({
	                    pong_ms: pong_ms
	                })
	            });
	    });
	
	    ws.listen('broadcast-ping', function(msg){
	        var reply;
	
	        ws.emit(reply = 'broadcast-pong:'+((new Date).getTime()+server_diff_ms));
	
	        console.log('emit: ['+reply+']');
	    });
	
	    ws.on('close', function () {
	        timer = clearInterval(timer);
	    });
	
	    function ping(){
	        var reply;
	        ping_ms = (new Date).getTime();
	        ws.emit(reply = 'ping:'+(ping_ms+server_diff_ms));
	
	        console.log('emit: ['+reply+']');
	    }
	
	});


/***/ },
/* 1 */
/*!*********************************!*\
  !*** ./src/SocketConnection.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	;(function(o){
	
	    o = o(this.WebSocket);
	
	    if (true) {
	        module.exports = o;
	    }
	
	    var scripts = document.getElementsByTagName('script'),
	        dom = scripts[scripts.length - 1],
	        export_name = dom && dom.getAttribute('name');
	
	    if (export_name) {
	        this[export_name] = o;
	    }
	
	})(function(WebSocket){
	    if ( ! WebSocket) return;
	
	    var re_event = /^on(.+)$/;
	
	    var Conn = function(target){
	        var me = this;
	        var ws = new WebSocket(target);
	        var events = {};
	        var channels = {};
	
	        this.close = function () {
	            ws && ws.close();
	            ws = null;
	            return me;
	        };
	
	        this.connect = function(other){
	            if (! ws) {
	                if (other) target = other;
	                ws = new WebSocket(target);
	                bindEvents(me, ws, events);
	            }
	
	            return me;
	        };
	
	        this.isAlive = function(){
	            return !! ws;
	        };
	
	        this.on = function(event, callback){
	            if ( ! ws) throw new Error('還沒建立連線');
	            if (typeof ws['on'+event] == 'undefined') return me;
	            if (typeof callback != 'function') return me;
	            if ( ! events[event]) events[event] = [];
	            events[event].push(callback);
	
	            return me;
	        };
	
	        this.emit = function(msg){
	            if ( ! ws) throw new Error('還沒建立連線');
	            if (typeof msg != 'string') msg = JSON.stringify(msg);
	            return ws.send(msg);
	        };
	
	        this.listen = function(chan, callback){
	            if ( ! channels[chan]) channels[chan] = [];
	            channels[chan].push(callback);
	
	            return me;
	        };
	
	        this.unlisten = function(chan){
	            if (channels[chan]) channels[chan] = [];
	            return me;
	        };
	
	        bindEvents(me, ws, events);
	
	        // for listen
	        me.on('message', function (e) {
	            var m = e.data.match(/^(?:([^:]+):)?\s*([^\$]+)$/);
	
	            if (m) {
	                var chan =m[1],
	                    msg = m[2];
	
	                if ( ! chan || ! channels[chan]) return;
	
	                try {
	                    msg = JSON.parse(msg);
	                } catch (e) {}
	                for (var i = 0; i < channels[chan].length; i++) {
	                    channels[chan][i](msg, e);
	                }
	            }
	        });
	
	        me.on('close', function(){
	            me.close();
	        });
	    };
	
	    function bindEvents(o, ws, events) {
	        for (var n in ws) {
	            var m = n.match(re_event);
	            if ( ! m) continue;
	
	            ws[n] = (function(name){
	                return function (e) {
	                    fireEvent(o, events[name], e);
	                };
	            })(m[1]);
	        }
	    }
	    function fireEvent(o, events, e){
	        if ( ! events) return;
	        for (var i = 0; i < events.length; i++) {
	            events[i].call(o, e);
	        }
	    }
	
	    return {
	        connect: function (url) {
	            return new Conn(url);
	        }
	    };
	
	});

/***/ },
/* 2 */
/*!*********************!*\
  !*** ./src/sha1.js ***!
  \*********************/
/***/ function(module, exports, __webpack_require__) {

	(function(o){
	
	    if (true) {
	        module.exports = o;
	    }
	
	    var scripts = document.getElementsByTagName('script'),
	        dom = scripts[scripts.length - 1],
	        export_name = dom && dom.getAttribute('name');
	
	    if (export_name) {
	        this[export_name] = o;
	    }
	
	})(function(str){
	    //  discuss at: http://phpjs.org/functions/sha1/
	    // original by: Webtoolkit.info (http://www.webtoolkit.info/)
	    // improved by: Michael White (http://getsprink.com)
	    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	    //    input by: Brett Zamir (http://brett-zamir.me)
	    //   example 1: sha1('Kevin van Zonneveld');
	    //   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'
	
	    var rotate_left = function(n, s) {
	        var t4 = (n << s) | (n >>> (32 - s));
	        return t4;
	    };
	
	    /*var lsb_hex = function (val) {
	     // Not in use; needed?
	     var str="";
	     var i;
	     var vh;
	     var vl;
	
	     for ( i=0; i<=6; i+=2 ) {
	     vh = (val>>>(i*4+4))&0x0f;
	     vl = (val>>>(i*4))&0x0f;
	     str += vh.toString(16) + vl.toString(16);
	     }
	     return str;
	     };*/
	
	    var cvt_hex = function(val) {
	        var str = '';
	        var i;
	        var v;
	
	        for (i = 7; i >= 0; i--) {
	            v = (val >>> (i * 4)) & 0x0f;
	            str += v.toString(16);
	        }
	        return str;
	    };
	
	    var blockstart;
	    var i, j;
	    var W = new Array(80);
	    var H0 = 0x67452301;
	    var H1 = 0xEFCDAB89;
	    var H2 = 0x98BADCFE;
	    var H3 = 0x10325476;
	    var H4 = 0xC3D2E1F0;
	    var A, B, C, D, E;
	    var temp;
	
	    // utf8_encode
	    str = unescape(encodeURIComponent(str));
	    var str_len = str.length;
	
	    var word_array = [];
	    for (i = 0; i < str_len - 3; i += 4) {
	        j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
	        word_array.push(j);
	    }
	
	    switch (str_len % 4) {
	        case 0:
	            i = 0x080000000;
	            break;
	        case 1:
	            i = str.charCodeAt(str_len - 1) << 24 | 0x0800000;
	            break;
	        case 2:
	            i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 0x08000;
	            break;
	        case 3:
	            i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) <<
	                8 | 0x80;
	            break;
	    }
	
	    word_array.push(i);
	
	    while ((word_array.length % 16) != 14) {
	        word_array.push(0);
	    }
	
	    word_array.push(str_len >>> 29);
	    word_array.push((str_len << 3) & 0x0ffffffff);
	
	    for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
	        for (i = 0; i < 16; i++) {
	            W[i] = word_array[blockstart + i];
	        }
	        for (i = 16; i <= 79; i++) {
	            W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
	        }
	
	        A = H0;
	        B = H1;
	        C = H2;
	        D = H3;
	        E = H4;
	
	        for (i = 0; i <= 19; i++) {
	            temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = rotate_left(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for (i = 20; i <= 39; i++) {
	            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = rotate_left(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for (i = 40; i <= 59; i++) {
	            temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = rotate_left(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        for (i = 60; i <= 79; i++) {
	            temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
	            E = D;
	            D = C;
	            C = rotate_left(B, 30);
	            B = A;
	            A = temp;
	        }
	
	        H0 = (H0 + A) & 0x0ffffffff;
	        H1 = (H1 + B) & 0x0ffffffff;
	        H2 = (H2 + C) & 0x0ffffffff;
	        H3 = (H3 + D) & 0x0ffffffff;
	        H4 = (H4 + E) & 0x0ffffffff;
	    }
	
	    temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
	    return temp.toLowerCase();
	});


/***/ }
/******/ ]);
//# sourceMappingURL=test-001.min.js.map